<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension="cs" #>
<#@ assembly  name="System.Core" #>
<#@ import namespace="System.Linq" #>
namespace Fooidity
{
<# for(int i=1; i<=16; i++){
    var tActionArgs = String.Join(", ",Enumerable.Range(1,i).Select(it=>String.Format("T{0}",it)));
#>

    public class DependentCodeSwitch<T, <#=tActionArgs#>> :
        CodeSwitch<T, <#=tActionArgs#>>
        where T : struct, CodeFeature
        <#= String.Join(Environment.NewLine + "        ", Enumerable.Range(1, i).Select(x => String.Format("where T{0} : struct, CodeFeature", x))) #>
    {
        <#= String.Join(Environment.NewLine + "        ", Enumerable.Range(1, i).Select(x => String.Format("readonly CodeSwitch<T{0}> _codeSwitch{0};", x))) #>

        public DependentCodeSwitch(<#= String.Join(", ", Enumerable.Range(1, i).Select(x => String.Format("CodeSwitch<T{0}> codeSwitch{0}", x))) #>)
        {
            <#= String.Join(Environment.NewLine + "            ", Enumerable.Range(1, i).Select(x => String.Format("_codeSwitch{0} = codeSwitch{0};", x))) #>
        }

        public bool Enabled
        {
            get { return <#= String.Join(" && ", Enumerable.Range(1, i).Select(x => String.Format("_codeSwitch{0}.Enabled", x))) #>; }
        }
        <# for(int j = 1; j <= i; j++) { 
        #>

        public CodeSwitch<T<#=j#>> Switch<#=j#>
        {
            get { return _codeSwitch<#=j#>; }
        }
<# } #>
    }
<# } #>

}